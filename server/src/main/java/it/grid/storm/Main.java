package it.grid.storm;

import it.grid.storm.storagearea.StorageArea;
import it.grid.storm.storagearea.StorageAreaManager;
import it.grid.storm.utils.MyCommandLineParser;
import it.grid.storm.webdav.JServer;
import it.grid.storm.webdav.WebApp;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Main {

	private static final Logger log = LoggerFactory.getLogger(Main.class);

	private static JServer server;
	private static String warTemplateFile = "";
	private static boolean isHttps = false;
	private static boolean isTest = false;
	/*
	 * The keystore default-file has been generated by the following command:
	 * keytool -keystore keystore -alias jetty -genkey -keyalg RSA (from:
	 * http://docs.codehaus.org/display/JETTY/How+to+configure+SSL) If you want
	 * to use your own key and certificate you have to generate your own.
	 */
	private static String keystoreFile = getExeDirectory()
			+ "/classes/keystore";;
	private static int serverPort;
	private final static int defaultPort = 8085;

	private final static String hostnameBEStorm = "etics-06-vm03.cnaf.infn.it";
	private final static int portBEStorm = 9998;
	
	private static List<WebApp> webapps;
	private static List<StorageArea> storageareas;

	public static void main(String[] args) {
		
		try {
			parseCommandLine(args);
		} catch (Exception e) {
			e.printStackTrace();
			return;
		}
		
		server = new JServer(serverPort);
		if ((new File(keystoreFile)).exists() && isHttps) {
			server.initAsHttpsServer(keystoreFile, "password", "password");
		} else {
			server.initAsHttpServer();
		}
		server.setWebappsDirectory(getExeDirectory()+"/webapps");
		
		if (isTest) {
			WebApp webDAVfsServer;
			/* create test webapp */
			try {
				webDAVfsServer = new WebApp("/WebDAV-fs-server","/tmp",warTemplateFile);
				/* start server and deploy test webapp */
				try {
					server.start();
					server.deploy(webDAVfsServer);
				} catch (Exception e) {
					e.printStackTrace();
					try {
						server.undeployAll();
						server.stop();
					} catch (Exception e1) {
						e1.printStackTrace();
					}
				}				
			} catch (IOException e) {
				e.printStackTrace();
			} catch (Exception e) {
				e.printStackTrace();
			}
		} else {
			/* retrieve Storage Areas from Storm Backend */
			try {
				StorageAreaManager.initFromStormBackend(hostnameBEStorm, portBEStorm);
			} catch (Exception e2) {
				e2.printStackTrace();
			}
			
			/* Generate WebApp List from StorageArea List */
			webapps = new ArrayList<WebApp>();
			storageareas = StorageAreaManager.getStorageAreas();
			for (int i = 0; i<storageareas.size(); i++) {
				try {
					webapps.add(new WebApp(storageareas.get(i),warTemplateFile));
				} catch (IOException e) {
					e.printStackTrace();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			log.info("WEBAPPS-SA-LIST: " + webapps.toString());
			try {
				server.start();
				for (int i = 0; i<webapps.size(); i++) {
					server.deploy(webapps.get(i));
				}
			} catch (Exception e) {
				e.printStackTrace();
				try {
					server.undeployAll();
					server.stop();
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		}
		
		//adds an handler to CTRL-C that stops and deletes the webapps directory
		Runtime.getRuntime().addShutdownHook(new Thread() {
			public void run() { /*
								 * shutdown code
								 */
				try {
					server.undeployAll();
					server.stop();
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});

	}

	private static String getExeDirectory() {
		return (new File(Main.class.getProtectionDomain().getCodeSource()
				.getLocation().getPath())).getParent();
	}

	private static void parseCommandLine(String[] args) throws Exception {

		MyCommandLineParser cli = new MyCommandLineParser(args);
		cli.addOption(
				"w",
				"the absolute file path of the WebDAV template webapp [necessary]",
				true, true);
		cli.addOption("p", "the server port [default = " + serverPort + "]",
				true, false);
		cli.addOption("ssl", "if keystore exists server works on https", false,
				false);
		cli.addOption("test",
				"create WebDAV-fs-server test webapp on root /tmp", false,
				false);
		warTemplateFile = cli.getString("w");
		isHttps = cli.hasOption("ssl");
		isTest = cli.hasOption("test");
		serverPort = cli.hasOption("p") ? cli.getInteger("p")
				: Main.defaultPort;
	}

}
